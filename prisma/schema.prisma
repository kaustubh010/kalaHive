// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String   @id @default(cuid())
  name              String?
  email             String?  @unique
  emailVerified     DateTime?
  image             String?
  hashedPassword    String?
  
  accounts          Account[]
  sessions          Session[]
  
  profile           Profile?  @relation("UserProfile")
  
  artworks          Artwork[]     @relation("UserArtworks")
  likes             ArtworkLike[] @relation("UserLikes")
  views             ArtworkView[] @relation("UserViews")
}

model Profile {
  id                  String   @id @default(cuid())
  userId              String   @unique
  user                User     @relation("UserProfile", fields: [userId], references: [id])

  userName            String?
  fullName            String?
  profileImage        String?
  coverImage          String?
  name                String?
  bio                 String?
  email               String?
  location            String?
  website             String?
  contactPreference   String?
  customContactInfo   String?
  artistStatement     String?
  preferences         String?
  userType            String?
  onboardingCompleted Boolean  @default(false)
  updatedAt           DateTime @updatedAt
  createdAt           DateTime @default(now())
}


model Artwork {
  id            String   @id @default(cuid())
  title         String
  description   String?
  artist        User     @relation("UserArtworks", fields: [artistId], references: [id])
  artistId      String
  imageUrl      String
  thumbnailUrl  String?
  category      String?
  tags          String[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  viewCount     Int      @default(0)
  likeCount     Int      @default(0)
  isFeatured    Boolean  @default(false)

  likes         ArtworkLike[]
  views         ArtworkView[]
}

model ArtworkLike {
  id         String   @id @default(cuid())
  user       User     @relation("UserLikes", fields: [userId], references: [id])
  userId     String
  artwork    Artwork  @relation(fields: [artworkId], references: [id])
  artworkId  String

  @@unique([userId, artworkId])
}

model ArtworkView {
  id         String   @id @default(cuid())
  user       User?    @relation("UserViews", fields: [userId], references: [id])
  userId     String?
  artwork    Artwork  @relation(fields: [artworkId], references: [id])
  artworkId  String

  viewedAt   DateTime @default(now())
}


model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id])
}
